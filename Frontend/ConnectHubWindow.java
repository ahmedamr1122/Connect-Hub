/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.Friends.BlockManagerImplement;
import Backend.Group.FindGroup;
import Backend.Group.Group;
import Backend.Group.UserGroupRole;
import Backend.Group.groupService;
import Backend.content.ContentService;
import Backend.content.Post;
import Backend.content.Story;
import Backend.friends.FriendManager;
//import Backend.friends.FriendManagerFactory;
import Backend.friends.FriendManagerImplement;
import Backend.friends.FriendRequest;
import Backend.friends.RequestStatus;
import Backend.notification.NotificationService;
import Backend.profile.ProfileUpdater;
import Backend.search.SearchService;
import Backend.user.FileManagement;
import Backend.user.FindUser;
import Backend.user.Login;
import Backend.user.Logout;
import Backend.user.PasswordHashing;
import Backend.user.SignUp;
import Backend.user.Status;
import Backend.user.User;
import Backend.user.UserAccountManagement;

import Backend.user.Validations;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;

/**
 *
 * @author Jana
 */
public class ConnectHubWindow extends javax.swing.JFrame {

    /**
     * Creates new form ConnectHubWindow
     */
    private String selectedImagePath;
    private ContentService contentService;
    private User currentUser;
    private BlockManagerImplement blockManager;
    //private FriendManagerFactory friendmanagerfactory;
    private UserAccountManagement userManagement;
    private FileManagement fileManagement;
    private ProfileUpdater profileUpdater;
    private FindUser findUser;
    private DefaultListModel listModel;
    private groupService groupsrvc;

    public ConnectHubWindow() {
        initComponents();
        contentService = new ContentService();  // Assuming ContentService handles User's posts and stories internally
        userManagement = new UserAccountManagement();
        fileManagement = FileManagement.getInstance();
        blockManager = BlockManagerImplement.getInstance();
        groupsrvc = groupService.getInstance();
        findUser = new FindUser();

        List<User> loadedUsers = fileManagement.loadUsers();

        //UserAccountManagement userManagement = new UserAccountManagement();
        userManagement.setUsers(loadedUsers);
        profileUpdater = new ProfileUpdater(fileManagement);

        userManagement.displayUsers();

        listModel = new DefaultListModel();
        searchList.setModel(listModel);
        
        searchList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

// Add searchList to the JPopupMenu
        menue.add(new JScrollPane(searchList));
        initializeSearchComponents();

        //menue.add(searchResultsPanel);
        /*
        
        try {
            refreshNewsfeed();
        } catch (IOException e) {
            e.printStackTrace();
        }*/
        // contentService = ew ContentService("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchResultsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList<>();
        menue = new javax.swing.JPopupMenu();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        signinLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        kGradientPanel4 = new keeptoo.KGradientPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane(postPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        postPanel = new javax.swing.JPanel();
        addPostButton = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane(StoriesPanel, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        StoriesPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        refresh = new javax.swing.JLabel();
        pfp = new javax.swing.JLabel();
        friendManagementButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        notificationLabel = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        postStoryButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        storyCaptionTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        uploadStoryButton = new javax.swing.JButton();
        imagePreview = new javax.swing.JLabel();
        kGradientPanel5 = new keeptoo.KGradientPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        uploadPostButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        ImagePreview2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        postCaptionTextField = new javax.swing.JTextField();
        postPostButton = new javax.swing.JButton();
        kGradientPanel6 = new keeptoo.KGradientPanel();
        coverPhotoLabel = new javax.swing.JLabel();
        profilePicLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        friendsScrollPanel = new javax.swing.JScrollPane(friendsPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        friendsPanel = new javax.swing.JPanel();
        userPosts = new javax.swing.JScrollPane(userPostPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        userPostPanel = new javax.swing.JPanel();
        uploadPfp = new javax.swing.JButton();
        viewUserGroupsButton = new javax.swing.JButton();
        uploadCoverPhoto1 = new javax.swing.JButton();
        updatePass = new javax.swing.JButton();
        updateBio = new javax.swing.JButton();
        bioLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        unBlockUsers1 = new javax.swing.JButton();
        blockUsers2 = new javax.swing.JButton();
        removeFriendButton1 = new javax.swing.JButton();
        kGradientPanel7 = new keeptoo.KGradientPanel();
        jPanel6 = new javax.swing.JPanel();
        emailTextField1 = new javax.swing.JTextField();
        passwordField1 = new javax.swing.JPasswordField();
        usernameTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        signUpButton = new javax.swing.JButton();
        dobTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        friendSuggestionScroll = new javax.swing.JScrollPane(suggestedFriendsPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        suggestedFriendsPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();
        incomingReqScroll = new javax.swing.JScrollPane(receivedRequestsPanel, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        receivedRequestsPanel = new javax.swing.JPanel();
        sentReqScroll = new javax.swing.JScrollPane(sentRequestsPanel, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        sentRequestsPanel = new javax.swing.JPanel();
        refresh2 = new javax.swing.JLabel();
        groupSuggestionScroll = new javax.swing.JScrollPane(suggestedFriendsPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        suggestedGroupsPanel = new javax.swing.JPanel();
        incomingGroupReqScroll = new javax.swing.JScrollPane(receivedRequestsPanel, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        receivedGroupRequestsPanel1 = new javax.swing.JPanel();
        sentGroupReqScroll = new javax.swing.JScrollPane(sentRequestsPanel, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        sentGroupRequestsPanel = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        kGradientPanel8 = new keeptoo.KGradientPanel();
        ownedGroupsScrollPanel = new javax.swing.JScrollPane(friendsPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        ownedGroupsPanel = new javax.swing.JPanel();
        joinedGroupsScrollPanel = new javax.swing.JScrollPane(friendsPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        joinedGroupsPanel = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        returnButton1 = new javax.swing.JButton();
        refresh3 = new javax.swing.JLabel();

        searchList.setBackground(new java.awt.Color(255, 204, 255));
        searchList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchList.setForeground(new java.awt.Color(51, 0, 51));
        jScrollPane3.setViewportView(searchList);

        javax.swing.GroupLayout searchResultsPanelLayout = new javax.swing.GroupLayout(searchResultsPanel);
        searchResultsPanel.setLayout(searchResultsPanelLayout);
        searchResultsPanelLayout.setHorizontalGroup(
            searchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );
        searchResultsPanelLayout.setVerticalGroup(
            searchResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
        );

        menue.setFocusable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel1.setkEndColor(new java.awt.Color(51, 0, 51));
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 153, 255));

        kGradientPanel2.setkEndColor(new java.awt.Color(51, 0, 51));
        kGradientPanel2.setkStartColor(new java.awt.Color(255, 153, 255));
        kGradientPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 51));
        jLabel3.setText("LogIn");

        emailTextField.setBackground(new java.awt.Color(255, 255, 255));
        emailTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emailTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 51));
        jLabel4.setText("Email");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 0, 51));
        jLabel5.setText("Password");

        passwordField.setBackground(new java.awt.Color(255, 255, 255));
        passwordField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passwordField.setForeground(new java.awt.Color(0, 0, 0));
        passwordField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(51, 0, 51));
        loginButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        loginButton.setText("Log in");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        signinLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        signinLabel.setForeground(new java.awt.Color(51, 0, 51));
        signinLabel.setText("Don't have an account?");
        signinLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signinLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(176, 176, 176))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(signinLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel5)
                                .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addComponent(passwordField)
                                .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(90, 90, 90))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel3)
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signinLabel)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        kGradientPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(462, 0, -1, 530));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 153, 255));
        jLabel6.setText("A Social Media Platform");
        kGradientPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 460, 210, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 51));
        jLabel1.setText("ConnectHub");
        kGradientPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 320, 60));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("Welcome to");
        kGradientPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 270, 60));

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
            .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                    .addGap(0, 7, Short.MAX_VALUE)
                    .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
            .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab1", kGradientPanel1);

        kGradientPanel4.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel4.setkStartColor(new java.awt.Color(51, 0, 51));
        kGradientPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 51)));

        postPanel.setLayout(new javax.swing.BoxLayout(postPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(postPanel);

        addPostButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/Plus.png"))); // NOI18N
        addPostButton.setText("jLabel9");
        addPostButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPostButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(addPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(300, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addPostButton)
                .addContainerGap())
        );

        kGradientPanel4.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 650, 470));

        StoriesPanel.setBackground(new java.awt.Color(255, 204, 255));
        jScrollPane1.setViewportView(StoriesPanel);

        kGradientPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, -10, 510, 70));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 204, 255));
        jLabel9.setText("Post a New Story");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(16, 16, 16))
        );

        kGradientPanel4.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 150, 60));

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/refresh2.png"))); // NOI18N
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });
        kGradientPanel4.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 50, 50));

        pfp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/Female User.png"))); // NOI18N
        pfp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pfpMouseClicked(evt);
            }
        });
        kGradientPanel4.add(pfp, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, -1, -1));

        friendManagementButton.setBackground(new java.awt.Color(255, 204, 255));
        friendManagementButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        friendManagementButton.setForeground(new java.awt.Color(51, 0, 51));
        friendManagementButton.setText("Social Management");
        friendManagementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendManagementButtonActionPerformed(evt);
            }
        });
        kGradientPanel4.add(friendManagementButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 460, 150, 60));

        logoutButton.setBackground(new java.awt.Color(255, 255, 255));
        logoutButton.setForeground(new java.awt.Color(51, 0, 51));
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        kGradientPanel4.add(logoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 490, -1, -1));

        notificationLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/NotificationResize.png"))); // NOI18N
        notificationLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notificationLabelMouseClicked(evt);
            }
        });
        kGradientPanel4.add(notificationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, -1, -1));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setText("Search");
        kGradientPanel4.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 70, 20));

        searchBar.setBackground(new java.awt.Color(255, 255, 255));
        searchBar.setForeground(new java.awt.Color(51, 0, 51));
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBarKeyReleased(evt);
            }
        });
        kGradientPanel4.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 170, -1));

        jTabbedPane2.addTab("tab3", kGradientPanel4);

        jPanel4.setBackground(new java.awt.Color(51, 0, 51));

        kGradientPanel3.setkEndColor(new java.awt.Color(51, 0, 51));
        kGradientPanel3.setkStartColor(new java.awt.Color(255, 204, 255));

        postStoryButton.setBackground(new java.awt.Color(255, 255, 255));
        postStoryButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        postStoryButton.setForeground(new java.awt.Color(51, 0, 51));
        postStoryButton.setText("Post Story");
        postStoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postStoryButtonActionPerformed(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/Welcome_to_ConnectHub-removebg-preview.png"))); // NOI18N
        jLabel11.setText("jLabel11");

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(postStoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(postStoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        storyCaptionTextField.setBackground(new java.awt.Color(51, 0, 51));
        storyCaptionTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        storyCaptionTextField.setForeground(new java.awt.Color(255, 255, 255));
        storyCaptionTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 204, 255)));
        storyCaptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storyCaptionTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 204, 255));
        jLabel7.setText("Add Caption:");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 204, 255));
        jLabel8.setText("Upload Image:");

        jLabel10.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 2, new java.awt.Color(255, 204, 255)));

        uploadStoryButton.setBackground(new java.awt.Color(255, 255, 255));
        uploadStoryButton.setForeground(new java.awt.Color(51, 0, 51));
        uploadStoryButton.setText("Upload");
        uploadStoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadStoryButtonActionPerformed(evt);
            }
        });

        imagePreview.setBackground(new java.awt.Color(255, 204, 255));
        imagePreview.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        imagePreview.setForeground(new java.awt.Color(255, 204, 255));
        imagePreview.setText("No image selected");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(storyCaptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(uploadStoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(imagePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(216, 216, 216)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(kGradientPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(uploadStoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imagePreview, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storyCaptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );

        jTabbedPane2.addTab("tab4", jPanel4);

        kGradientPanel5.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel5.setkStartColor(new java.awt.Color(51, 0, 51));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 0, 51));
        jLabel12.setText("Upload Image");

        uploadPostButton.setBackground(new java.awt.Color(51, 0, 51));
        uploadPostButton.setForeground(new java.awt.Color(255, 255, 255));
        uploadPostButton.setText("Upload");
        uploadPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPostButtonActionPerformed(evt);
            }
        });

        jLabel13.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 0, 0, new java.awt.Color(51, 0, 51)));

        ImagePreview2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ImagePreview2.setForeground(new java.awt.Color(51, 0, 51));
        ImagePreview2.setText("No image selected");

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 0, 51));
        jLabel15.setText("Add Caption:");

        postCaptionTextField.setBackground(new java.awt.Color(255, 255, 255));
        postCaptionTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        postCaptionTextField.setForeground(new java.awt.Color(51, 0, 51));
        postCaptionTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        postCaptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postCaptionTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(uploadPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(ImagePreview2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postCaptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(82, 82, 82))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImagePreview2, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                .addGap(45, 45, 45)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postCaptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        postPostButton.setBackground(new java.awt.Color(255, 255, 255));
        postPostButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        postPostButton.setForeground(new java.awt.Color(51, 0, 51));
        postPostButton.setText("Add New Post");
        postPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postPostButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel5Layout = new javax.swing.GroupLayout(kGradientPanel5);
        kGradientPanel5.setLayout(kGradientPanel5Layout);
        kGradientPanel5Layout.setHorizontalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(postPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        kGradientPanel5Layout.setVerticalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(postPostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );

        jTabbedPane2.addTab("tab4", kGradientPanel5);

        kGradientPanel6.setkEndColor(new java.awt.Color(51, 0, 51));
        kGradientPanel6.setkStartColor(new java.awt.Color(255, 204, 255));
        kGradientPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        kGradientPanel6.add(coverPhotoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 393, 190));

        profilePicLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        profilePicLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/1-removebg.png"))); // NOI18N
        kGradientPanel6.add(profilePicLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, -1, 98));

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 0, 51));
        jLabel17.setText("Bio:");
        kGradientPanel6.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 0, 51));
        jLabel20.setText("Your Friends");
        kGradientPanel6.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        friendsPanel.setBackground(new java.awt.Color(255, 255, 255));
        friendsPanel.setLayout(new javax.swing.BoxLayout(friendsPanel, javax.swing.BoxLayout.Y_AXIS));
        friendsScrollPanel.setViewportView(friendsPanel);

        kGradientPanel6.add(friendsScrollPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 321, 190, 204));

        userPostPanel.setBackground(new java.awt.Color(255, 255, 255));
        userPostPanel.setLayout(new javax.swing.BoxLayout(userPostPanel, javax.swing.BoxLayout.Y_AXIS));
        userPosts.setViewportView(userPostPanel);

        kGradientPanel6.add(userPosts, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, -10, 465, 540));

        uploadPfp.setBackground(new java.awt.Color(255, 204, 255));
        uploadPfp.setForeground(new java.awt.Color(51, 0, 51));
        uploadPfp.setText("Upload Profile Photo");
        uploadPfp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPfpActionPerformed(evt);
            }
        });
        kGradientPanel6.add(uploadPfp, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, 150, -1));

        viewUserGroupsButton.setBackground(new java.awt.Color(255, 204, 255));
        viewUserGroupsButton.setForeground(new java.awt.Color(51, 0, 51));
        viewUserGroupsButton.setText("View Your Groups");
        viewUserGroupsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUserGroupsButtonActionPerformed(evt);
            }
        });
        kGradientPanel6.add(viewUserGroupsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 340, 130, -1));

        uploadCoverPhoto1.setBackground(new java.awt.Color(255, 204, 255));
        uploadCoverPhoto1.setForeground(new java.awt.Color(51, 0, 51));
        uploadCoverPhoto1.setText("Upload Cover Photo");
        uploadCoverPhoto1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadCoverPhoto1ActionPerformed(evt);
            }
        });
        kGradientPanel6.add(uploadCoverPhoto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 150, -1));

        updatePass.setBackground(new java.awt.Color(255, 204, 255));
        updatePass.setForeground(new java.awt.Color(51, 0, 51));
        updatePass.setText("Update Password");
        updatePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePassActionPerformed(evt);
            }
        });
        kGradientPanel6.add(updatePass, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 460, 130, -1));

        updateBio.setBackground(new java.awt.Color(255, 204, 255));
        updateBio.setForeground(new java.awt.Color(51, 0, 51));
        updateBio.setText("Update Bio");
        updateBio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBioActionPerformed(evt);
            }
        });
        kGradientPanel6.add(updateBio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 100, -1));

        bioLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        kGradientPanel6.add(bioLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 170, 30));

        backButton.setBackground(new java.awt.Color(51, 0, 51));
        backButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 204, 255));
        backButton.setText("<<");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        kGradientPanel6.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 70, 30));

        unBlockUsers1.setBackground(new java.awt.Color(255, 204, 255));
        unBlockUsers1.setForeground(new java.awt.Color(51, 0, 51));
        unBlockUsers1.setText("Un Block User");
        unBlockUsers1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unBlockUsers1ActionPerformed(evt);
            }
        });
        kGradientPanel6.add(unBlockUsers1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 130, -1));

        blockUsers2.setBackground(new java.awt.Color(255, 204, 255));
        blockUsers2.setForeground(new java.awt.Color(51, 0, 51));
        blockUsers2.setText("Block Users");
        blockUsers2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockUsers2ActionPerformed(evt);
            }
        });
        kGradientPanel6.add(blockUsers2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 400, 130, -1));

        removeFriendButton1.setBackground(new java.awt.Color(255, 204, 255));
        removeFriendButton1.setForeground(new java.awt.Color(51, 0, 51));
        removeFriendButton1.setText("Remove Friend");
        removeFriendButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFriendButton1ActionPerformed(evt);
            }
        });
        kGradientPanel6.add(removeFriendButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, 130, -1));

        jTabbedPane2.addTab("tab5", kGradientPanel6);

        kGradientPanel7.setkEndColor(new java.awt.Color(51, 0, 51));
        kGradientPanel7.setkStartColor(new java.awt.Color(255, 204, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        emailTextField1.setBackground(new java.awt.Color(255, 255, 255));
        emailTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emailTextField1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        emailTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextField1ActionPerformed(evt);
            }
        });

        passwordField1.setBackground(new java.awt.Color(255, 255, 255));
        passwordField1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passwordField1.setForeground(new java.awt.Color(0, 0, 0));
        passwordField1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        passwordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordField1ActionPerformed(evt);
            }
        });

        usernameTextField.setBackground(new java.awt.Color(255, 255, 255));
        usernameTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        usernameTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 0, 51));
        jLabel16.setText("SignUp");

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 0, 51));
        jLabel18.setText("Email");

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 0, 51));
        jLabel19.setText("Password");

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(51, 0, 51));
        jLabel21.setText("Username");

        signUpButton.setBackground(new java.awt.Color(51, 0, 51));
        signUpButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        signUpButton.setText("SignUp");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });

        dobTextField.setBackground(new java.awt.Color(255, 255, 255));
        dobTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dobTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 0, 51)));
        dobTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobTextFieldActionPerformed(evt);
            }
        });

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(51, 0, 51));
        jLabel22.setText("Date of Birth (YYYY-MM-DD):");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(jLabel16)
                .addContainerGap(189, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel21)
                        .addComponent(jLabel19)
                        .addComponent(jLabel18)
                        .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(passwordField1)
                        .addComponent(emailTextField1)
                        .addComponent(signUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                        .addComponent(dobTextField)))
                .addGap(73, 73, 73))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel16)
                .addGap(10, 10, 10)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addGap(2, 2, 2)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dobTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(signUpButton)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout kGradientPanel7Layout = new javax.swing.GroupLayout(kGradientPanel7);
        kGradientPanel7.setLayout(kGradientPanel7Layout);
        kGradientPanel7Layout.setHorizontalGroup(
            kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel7Layout.createSequentialGroup()
                .addContainerGap(227, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211))
        );
        kGradientPanel7Layout.setVerticalGroup(
            kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("tab6", kGradientPanel7);

        jPanel7.setBackground(new java.awt.Color(255, 204, 255));

        friendSuggestionScroll.setPreferredSize(new java.awt.Dimension(300, 40));

        suggestedFriendsPanel.setBackground(new java.awt.Color(255, 204, 255));
        suggestedFriendsPanel.setPreferredSize(new java.awt.Dimension(300, 40));
        suggestedFriendsPanel.setLayout(new javax.swing.BoxLayout(suggestedFriendsPanel, javax.swing.BoxLayout.Y_AXIS));
        friendSuggestionScroll.setViewportView(suggestedFriendsPanel);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(51, 0, 51));
        jLabel24.setText("Friend Suggestions");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(51, 0, 51));
        jLabel23.setText("Sent Friend Requests");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(51, 0, 51));
        jLabel25.setText("Incoming Friend Requests");

        returnButton.setBackground(new java.awt.Color(51, 0, 51));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 204, 255));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        receivedRequestsPanel.setBackground(new java.awt.Color(255, 204, 255));
        receivedRequestsPanel.setLayout(new javax.swing.BoxLayout(receivedRequestsPanel, javax.swing.BoxLayout.Y_AXIS));
        incomingReqScroll.setViewportView(receivedRequestsPanel);

        sentRequestsPanel.setBackground(new java.awt.Color(255, 204, 255));
        sentRequestsPanel.setLayout(new javax.swing.BoxLayout(sentRequestsPanel, javax.swing.BoxLayout.Y_AXIS));
        sentReqScroll.setViewportView(sentRequestsPanel);

        refresh2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/refresh2.png"))); // NOI18N
        refresh2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refresh2MouseClicked(evt);
            }
        });

        groupSuggestionScroll.setPreferredSize(new java.awt.Dimension(300, 40));

        suggestedGroupsPanel.setBackground(new java.awt.Color(255, 204, 255));
        suggestedGroupsPanel.setPreferredSize(new java.awt.Dimension(300, 40));
        suggestedGroupsPanel.setLayout(new javax.swing.BoxLayout(suggestedGroupsPanel, javax.swing.BoxLayout.Y_AXIS));
        groupSuggestionScroll.setViewportView(suggestedGroupsPanel);

        receivedGroupRequestsPanel1.setBackground(new java.awt.Color(255, 204, 255));
        receivedGroupRequestsPanel1.setLayout(new javax.swing.BoxLayout(receivedGroupRequestsPanel1, javax.swing.BoxLayout.Y_AXIS));
        incomingGroupReqScroll.setViewportView(receivedGroupRequestsPanel1);

        sentGroupRequestsPanel.setBackground(new java.awt.Color(255, 204, 255));
        sentGroupRequestsPanel.setLayout(new javax.swing.BoxLayout(sentGroupRequestsPanel, javax.swing.BoxLayout.Y_AXIS));
        sentGroupReqScroll.setViewportView(sentGroupRequestsPanel);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(51, 0, 51));
        jLabel26.setText("Sent Group Requests");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(51, 0, 51));
        jLabel27.setText("Incoming Group Invitations");

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(51, 0, 51));
        jLabel28.setText("Group Suggestions");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(friendSuggestionScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(incomingReqScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel25)
                                .addGap(34, 34, 34)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(sentReqScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groupSuggestionScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel28)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
                            .addComponent(incomingGroupReqScroll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sentGroupReqScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))))
                .addGap(106, 106, 106)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jLabel24)
                    .addContainerGap(738, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refresh2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(friendSuggestionScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(incomingReqScroll)
                                    .addComponent(sentReqScroll))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel28))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(groupSuggestionScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(incomingGroupReqScroll)
                            .addComponent(sentGroupReqScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 490, Short.MAX_VALUE)
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel24)
                    .addContainerGap(519, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("tab7", jPanel7);

        kGradientPanel8.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel8.setkStartColor(new java.awt.Color(51, 0, 51));

        ownedGroupsPanel.setBackground(new java.awt.Color(255, 255, 255));
        ownedGroupsPanel.setLayout(new javax.swing.BoxLayout(ownedGroupsPanel, javax.swing.BoxLayout.Y_AXIS));
        ownedGroupsScrollPanel.setViewportView(ownedGroupsPanel);

        joinedGroupsPanel.setBackground(new java.awt.Color(255, 255, 255));
        joinedGroupsPanel.setLayout(new javax.swing.BoxLayout(joinedGroupsPanel, javax.swing.BoxLayout.Y_AXIS));
        joinedGroupsScrollPanel.setViewportView(joinedGroupsPanel);

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(51, 0, 51));
        jLabel29.setText("Joined Groups");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(51, 0, 51));
        jLabel30.setText("Owned Groups");

        returnButton1.setBackground(new java.awt.Color(51, 0, 51));
        returnButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnButton1.setForeground(new java.awt.Color(255, 204, 255));
        returnButton1.setText("Return");
        returnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButton1ActionPerformed(evt);
            }
        });

        refresh3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/refresh2.png"))); // NOI18N
        refresh3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refresh3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel8Layout = new javax.swing.GroupLayout(kGradientPanel8);
        kGradientPanel8.setLayout(kGradientPanel8Layout);
        kGradientPanel8Layout.setHorizontalGroup(
            kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel8Layout.createSequentialGroup()
                        .addComponent(returnButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel8Layout.createSequentialGroup()
                        .addGap(0, 175, Short.MAX_VALUE)
                        .addGroup(kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ownedGroupsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addGap(29, 29, 29)
                        .addGroup(kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kGradientPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addGap(270, 270, 270)
                                .addComponent(refresh3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(joinedGroupsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        kGradientPanel8Layout.setVerticalGroup(
            kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel8Layout.createSequentialGroup()
                .addComponent(refresh3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(returnButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(kGradientPanel8Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ownedGroupsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(joinedGroupsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(199, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab8", kGradientPanel8);

        getContentPane().add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        jTabbedPane2.setSelectedIndex(2);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        handleLogin();
        try {
            refreshFriendManagement();
            refreshNewsfeed();
        } catch (IOException ex) {

        }

    }//GEN-LAST:event_loginButtonActionPerformed

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void storyCaptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storyCaptionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storyCaptionTextFieldActionPerformed

    private void uploadStoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadStoryButtonActionPerformed
        uploadImageStory();
    }//GEN-LAST:event_uploadStoryButtonActionPerformed

    private void postStoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postStoryButtonActionPerformed
        try {
            postStory();
            jTabbedPane2.setSelectedIndex(1);
        } catch (IOException ex) {
            Logger.getLogger(ConnectHubWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_postStoryButtonActionPerformed

    private void addPostButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPostButtonMouseClicked
        jTabbedPane2.setSelectedIndex(3);
    }//GEN-LAST:event_addPostButtonMouseClicked

    private void uploadPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPostButtonActionPerformed
        uploadImagePost();
    }//GEN-LAST:event_uploadPostButtonActionPerformed

    private void postCaptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postCaptionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postCaptionTextFieldActionPerformed

    private void postPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postPostButtonActionPerformed
        try {
            load();
            postPost();
            fileManagement.saveUsers(userManagement.getUsers());
            jTabbedPane2.setSelectedIndex(1);
        } catch (IOException ex) {
            Logger.getLogger(ConnectHubWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_postPostButtonActionPerformed

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        try {
            load();
            refreshFriendManagement();
            refreshNewsfeed();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshMouseClicked

    private void pfpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pfpMouseClicked
        load();
        jTabbedPane2.setSelectedIndex(4);
        displayFriendsList(currentUser);
        bioLabel.setText(currentUser.getBio().trim());
        ImageIcon coverPhotoIcon = new ImageIcon(currentUser.getCoverPhoto());
        coverPhotoLabel.setIcon(coverPhotoIcon);
        if (!currentUser.getProfilePhoto().equals("")) {
            ImageIcon imageIcon = new ImageIcon(currentUser.getProfilePhoto());
            Image image = imageIcon.getImage();

            // Get the label's width and height
            int width = profilePicLabel.getWidth();
            int height = profilePicLabel.getHeight();
            // Scale the image to fit within the label's size
            Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            // Set the scaled image as the label's icon
            profilePicLabel.setIcon(new ImageIcon(scaledImage));
            displayUserPosts(currentUser);
            displayFriendsList(currentUser);
        }
    }//GEN-LAST:event_pfpMouseClicked

    private void uploadPfpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPfpActionPerformed
        load();
        uploadProfilePicture();
        fileManagement.saveUsers(userManagement.getUsers());
    }//GEN-LAST:event_uploadPfpActionPerformed

    private void viewUserGroupsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUserGroupsButtonActionPerformed


    }//GEN-LAST:event_viewUserGroupsButtonActionPerformed

    private void uploadCoverPhoto1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadCoverPhoto1ActionPerformed
        load();
        uploadCoverPhoto();
        fileManagement.saveUsers(userManagement.getUsers());

    }//GEN-LAST:event_uploadCoverPhoto1ActionPerformed

    private void updatePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePassActionPerformed
        load();
        updatePassword();
        fileManagement.saveUsers(userManagement.getUsers());


    }//GEN-LAST:event_updatePassActionPerformed

    private void updateBioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBioActionPerformed
        load();
        updateBio();
        fileManagement.saveUsers(userManagement.getUsers());
    }//GEN-LAST:event_updateBioActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_backButtonActionPerformed

    private void signinLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signinLabelMouseClicked
        jTabbedPane2.setSelectedIndex(5);
    }//GEN-LAST:event_signinLabelMouseClicked

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void emailTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextField1ActionPerformed

    private void passwordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordField1ActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        load();
        handleSignUp();
        fileManagement.saveUsers(userManagement.getUsers());
    }//GEN-LAST:event_signUpButtonActionPerformed

    private void dobTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dobTextFieldActionPerformed

    private void unBlockUsers1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unBlockUsers1ActionPerformed
        load();
        handleUnBlockUser();
        fileManagement.saveUsers(userManagement.getUsers());

    }//GEN-LAST:event_unBlockUsers1ActionPerformed

    private void friendManagementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendManagementButtonActionPerformed
        load();
        jTabbedPane2.setSelectedIndex(6);

        showSuggestedFriends();
        showIncomingRequests();
        refreshSentRequests();
    }//GEN-LAST:event_friendManagementButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        load();
        Logout logout = new Logout();
        User user = findUser.findUserById(currentUser.getUserId(), userManagement.getUsers());
        logout.logout(user, userManagement.getUsers());
        jTabbedPane2.setSelectedIndex(0);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void refresh2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh2MouseClicked
        load();
        refreshFriendManagement();
    }//GEN-LAST:event_refresh2MouseClicked

    private void blockUsers2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockUsers2ActionPerformed
        load();
        handleUnBlockUser();
        fileManagement.saveUsers(userManagement.getUsers());
    }//GEN-LAST:event_blockUsers2ActionPerformed

    private void removeFriendButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFriendButton1ActionPerformed
        load();
        String friendUsername = JOptionPane.showInputDialog(this,
                "Enter the username of the friend to remove:",
                "Remove Friend",
                JOptionPane.PLAIN_MESSAGE);

        // Validate input
        if (friendUsername == null || friendUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Friend's username cannot be empty.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        removeFriend(friendUsername);
        fileManagement.saveUsers(userManagement.getUsers());
    }//GEN-LAST:event_removeFriendButton1ActionPerformed

    private void returnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnButton1ActionPerformed

    private void refresh3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_refresh3MouseClicked

    private void notificationLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notificationLabelMouseClicked
        new NotificationWindow(currentUser, userManagement.getUsers()).setVisible(true);
    }//GEN-LAST:event_notificationLabelMouseClicked

    private void searchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyReleased
        String search = searchBar.getText().trim();

        if (!search.equals("")) {
            listModel.removeAllElements();
            List<User> matchingUsers = SearchService.getInstance().searchUsers(search, userManagement.getUsers(), currentUser.getBlocked(), currentUser);
            List<Group> matchingGroups = SearchService.getInstance().searchGroups(search, groupsrvc.getAllGroups());

            // Clear and populate the list model with search results
            listModel.clear();
            for (User user : matchingUsers) {
                listModel.addElement("User: " + user.getUsername());
            }
            for (Group group : matchingGroups) {
                listModel.addElement("Group: " + group.getGroupId());
            }

            if (listModel.isEmpty()) {
                listModel.addElement("No results found");
            }
        }

        menue.show(searchBar, 0, searchBar.getHeight());
    }//GEN-LAST:event_searchBarKeyReleased

    private void initializeSearchComponents() {
        searchList.setModel(listModel);
        searchList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Add mouse listener to handle selection
        searchList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Double-click to select
                    int index = searchList.locationToIndex(e.getPoint());
                    String selectedValue = searchList.getModel().getElementAt(index);
                    handleSelection(selectedValue);
                    menue.setVisible(false); // Hide the popup menu after selection
                }
            }
        });
    }

    private void handleSelection(String selectedValue) {
        if (selectedValue.startsWith("User: ")) {
            String username = selectedValue.substring(6); // Extract username
            User selectedUser = findUser.findUserByUsername(username, userManagement.getUsers());
            FriendManager friendManager = FriendManagerImplement.getInstance();
            List<User> suggestedFriends = friendManager.suggestFriends(currentUser, userManagement.getUsers());

            // Show user-specific options
            Object[] options = {"Add Friend", "Remove Friend", "Block User", "View Profile"};
            int choice = JOptionPane.showOptionDialog(
                    this,
                    "Choose an action for " + username + ":",
                    "User Actions",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // Execute the chosen action
            switch (choice) {
                case 0: // Add Friend
                    handleAddFriend(selectedUser, suggestedFriends);
                    break;
                case 1: // Remove Friend
                    handleRemoveFriend(selectedUser);
                    break;
                case 2: // Block User
                    handleBlockUsers(selectedUser);
                    break;
                case 3: // View Profile
                    handleViewProfile(selectedUser);
                    break;
                default:
                    break;
            }
        } else if (selectedValue.startsWith("Group: ")) {
            String groupId = selectedValue.substring(7); // Extract group name
            UserGroupRole userGroupRole = UserGroupRole.getInstance();

            // Show group-specific options
            Object[] options = {"Join Group", "Leave Group", "View Group"};
            int choice = JOptionPane.showOptionDialog(
                    this,
                    "Choose an action for " + groupId + ":",
                    "Group Actions",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // Execute the chosen action
            switch (choice) {
                case 0: // Join Group
                    handleJoinGroup(groupId, userGroupRole);
                    break;
                case 1: // Leave Group
                    handleLeaveGroup(groupId, userGroupRole);
                    break;
                case 2: // View Group
                    handleViewGroup(groupId);
                    break;
                default:
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No valid selection.");
        }
    }

    private void handleAddFriend(User selectedUser, List<User> suggestedFriends) {
        if (suggestedFriends.contains(selectedUser)) {
            sendFriendRequest(selectedUser);
            JOptionPane.showMessageDialog(this, "Friend request sent to " + selectedUser.getUsername() + ".");
        } else if (currentUser.getFriends(userManagement.getUsers()).contains(selectedUser)) {
            JOptionPane.showMessageDialog(this, "This user is already your friend.");
        } else if (currentUser.getBlocked(userManagement.getUsers()).contains(selectedUser)) {
            JOptionPane.showMessageDialog(this, "You cannot add this user as they are blocked.");
        } else {
            JOptionPane.showMessageDialog(this, "This user is not in your suggested friends list.");
        }
    }

    private void handleRemoveFriend(User selectedUser) {
        String friendUsername = selectedUser.getUsername();
        removeFriend(friendUsername);
        /*if (currentUser.getFriends(userManagement.getUsers()).contains(selectedUser)) {
            removeFriend(friendUsername);
            JOptionPane.showMessageDialog(this, "Friend removed: " + selectedUser.getUsername());
        } else {
            JOptionPane.showMessageDialog(this, "This user is not your friend.");
        }*/
    }

    private void handleBlockUsers(User selectedUser) {
        if (currentUser.getBlocked(userManagement.getUsers()).contains(selectedUser)) {
            JOptionPane.showMessageDialog(this, "This user is already blocked.");
        } else {
            try {
                blockManager.block(currentUser, selectedUser, userManagement.getUsers()); // Assuming `currentUser` is the logged-in user
                JOptionPane.showMessageDialog(this, "User " + selectedUser.getUsername() + " has been blocked.",
                        "Success", JOptionPane.INFORMATION_MESSAGE);

                // Optionally refresh the UI or friends list
                refreshFriendsList(); // Assuming you have a method to refresh the friends list display
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error while blocking user: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void handleViewProfile(User selectedUser) {
        //viewUserProfile(selectedUser);
    }

    private void handleJoinGroup(String groupId, UserGroupRole userGroupRole) {
        Group group = FindGroup.findGroupById(groupId);
        if (group.isMember(currentUser)) {
            JOptionPane.showMessageDialog(this, "You are already a member of this group.");
        } else if (group.getPendingJoinRequests().stream().anyMatch(req -> req.getUser().equals(currentUser.getUserId()))) {
            JOptionPane.showMessageDialog(this, "You already have a pending join request for this group.");
        } else {
            try {
                userGroupRole.sendJoinRequest(currentUser, group);
                JOptionPane.showMessageDialog(this, "Join request sent for the group: " + groupId);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }

    private void handleLeaveGroup(String groupId, UserGroupRole userGroupRole) {
        Group group = FindGroup.findGroupById(groupId);
        if (!group.isMember(currentUser)) {
            JOptionPane.showMessageDialog(this, "You are not a member of this group.");
        } else {
            try {
                userGroupRole.leaveGroup(group, currentUser);
                JOptionPane.showMessageDialog(this, "You have left the group: " + groupId);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }

    private void handleViewGroup(String groupName) {
        //viewGroup(groupName);
    }

    private void handleLogin() {
        String email = emailTextField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();

        Validations validations = new Validations();

        // Validate email
        if (!validations.isValidEmail(email)) {
            JOptionPane.showMessageDialog(this, "Invalid email format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate password
        if (!validations.isValidPassword(password)) {
            JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and include an uppercase letter, lowercase letter, digit, and special character.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform login
        Login lo = new Login();
        boolean loginSuccessful = lo.login(email, password, userManagement.getUsers());

        System.out.println(loginSuccessful);
        try {
            User u = findUser.findUserByEmail(email, userManagement.getUsers());
            System.out.println(findUser.findUserByEmail(email, userManagement.getUsers()).getPassword() + " " + new PasswordHashing().hashedPass(password));
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Error : " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        if (loginSuccessful) {
            JOptionPane.showMessageDialog(this, "Login successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            fileManagement.saveUsers(userManagement.getUsers());
            User current = findUser.findUserByEmail(email, userManagement.getUsers());
            this.currentUser = current;
            jTabbedPane2.setSelectedIndex(1);  // Redirect to dashboard
        } else {
            JOptionPane.showMessageDialog(this, "Invalid email or password.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleSignUp() {
        String email = emailTextField1.getText().trim();
        String username = usernameTextField.getText().trim();
        String password = new String(passwordField1.getPassword()).trim();
        String dobInput = dobTextField.getText().trim();

        Validations validations = new Validations();
        LocalDate dateOfBirth;

        // Validate email
        if (!validations.isValidEmail(email)) {
            JOptionPane.showMessageDialog(this, "Invalid email format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate username
        if (!validations.isValidUsername(username)) {
            JOptionPane.showMessageDialog(this, "Invalid username. Username must be alphanumeric and 3-15 characters long.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!validations.loginUsernameValidation(username)) {
            JOptionPane.showMessageDialog(this, "Username is already taken.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate password
        if (!validations.isValidPassword(password)) {
            JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and include uppercase, lowercase, digit, and special character.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate date of birth
        try {
            dateOfBirth = LocalDate.parse(dobInput);
            if (!validations.isValidDateOfBirth(dateOfBirth)) {
                JOptionPane.showMessageDialog(this, "You must be at least 10 years old to sign up.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please enter in YYYY-MM-DD format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform sign-up
        try {
            SignUp signUp = new SignUp();
            User newUser = signUp.signup(email, username, password, dateOfBirth, userManagement.getUsers());
            userManagement.getUsers().add(newUser);
            fileManagement.saveUsers(userManagement.getUsers());
            // userManagement.setUsers(fileManagement.loadUsers("Users.json"));

            JOptionPane.showMessageDialog(this, "Sign-Up Successful! Welcome, " + newUser.getUsername() + "!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Redirect to the login page
            jTabbedPane2.setSelectedIndex(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error during sign-up: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void load() {
        userManagement.setUsers(fileManagement.loadUsers());
        if (currentUser != null) {
            User user = findUser.findUserById(currentUser.getUserId(), userManagement.getUsers());
            currentUser = user;
        }

        //refreshFriendManagement();
    }

    private void handleBlockUser() {
        String userToBlockUsername = JOptionPane.showInputDialog(this, "Enter the username of the user to block:",
                "Block User", JOptionPane.PLAIN_MESSAGE);

        if (userToBlockUsername == null || userToBlockUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Find the user to be blocked
        // Assuming FindUser is a utility to search users
        User userToBlock = findUser.findUserByUsername(userToBlockUsername, userManagement.getUsers());

        if (userToBlock == null) {
            JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform blocking
        try {
            blockManager.block(currentUser, userToBlock, userManagement.getUsers()); // Assuming `currentUser` is the logged-in user
            JOptionPane.showMessageDialog(this, "User " + userToBlock.getUsername() + " has been blocked.",
                    "Success", JOptionPane.INFORMATION_MESSAGE);

            // Optionally refresh the UI or friends list
            refreshFriendsList(); // Assuming you have a method to refresh the friends list display
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error while blocking user: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleUnBlockUser() {
        String userToUnBlockUsername = JOptionPane.showInputDialog(this, "Enter the username of the user to block:",
                "Block User", JOptionPane.PLAIN_MESSAGE);

        if (userToUnBlockUsername == null || userToUnBlockUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Find the user to be blocked
        // Assuming FindUser is a utility to search users
        User userToUnBlock = findUser.findUserByUsername(userToUnBlockUsername, userManagement.getUsers());

        if (userToUnBlock == null) {
            JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform blocking
        try {
            blockManager.unBlock(currentUser, userToUnBlock, userManagement.getUsers()); // Assuming `currentUser` is the logged-in user
            JOptionPane.showMessageDialog(this, "User " + userToUnBlock.getUsername() + " has been unblocked.",
                    "Success", JOptionPane.INFORMATION_MESSAGE);

            // Optionally refresh the UI or friends list
            refreshFriendsList(); // Assuming you have a method to refresh the friends list display
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error while blocking user: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeFriend(String friendUsername) {

        // Find the friend in the current user's friend list
        User friendToRemove = null;
        for (User friend : currentUser.getFriends()) {

            User user1 = findUser.findUserById(friend.getUserId(), userManagement.getUsers());
            if (user1.getUsername().equalsIgnoreCase(friendUsername)) {
                friendToRemove = user1;
                break;
            }
        }

        if (friendToRemove == null) {
            JOptionPane.showMessageDialog(this,
                    "Friend not found in your friend list.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Use the FriendManagerFactory to get a FriendManager instance
        try {
            FriendManager friendManager = FriendManagerImplement.getInstance();
            //FriendManager friendManager = FriendManagerFactory.createFriendManager(fileManagement);  // Get the instance from the factory
            friendManager.removeFriend(currentUser, friendToRemove, userManagement.getUsers());  // Remove the friend using the factory's manager
            JOptionPane.showMessageDialog(this,
                    "Friend " + friendToRemove.getUsername() + " has been removed.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            // Refresh the friends list in the UI
            refreshFriendsList();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error while removing friend: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refreshFriendManagement() {
        showSuggestedFriends();
        showIncomingRequests();
        refreshSentRequests();
        refreshFriendsList();
    }

    private void showSuggestedFriends() {
        // Get the suggested friends using the FriendManager
        List<User> allUsers = userManagement.getUsers();
        //FriendManager friendManager = FriendManagerFactory.createFriendManager(fileManagement);
        FriendManager friendManager = FriendManagerImplement.getInstance();
        List<User> suggestedFriends = friendManager.suggestFriends(currentUser, allUsers);  // assuming allUsers is a list of all users

        // Clear existing components
        suggestedFriendsPanel.removeAll();

        // Create a panel for each suggested friend
        for (User user : suggestedFriends) {
            JPanel friendPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));  // Use FlowLayout to align the components horizontally
            friendPanel.setPreferredSize(new Dimension(300, 40));  // Set preferred size for the panel

            // Create a label to show the username
            JLabel userLabel = new JLabel(user.getUsername());
            userLabel.setFont(new Font("Arial", Font.PLAIN, 14));

            // Create a button to send a friend request
            JButton sendRequestButton = new JButton("Send Friend Request");
            sendRequestButton.addActionListener(e -> sendFriendRequest(user));

            // Add the username and button to the panel
            friendPanel.add(userLabel);
            friendPanel.add(sendRequestButton);

            // Add the panel for this suggested friend to the scrollable panel
            suggestedFriendsPanel.add(friendPanel);
        }

        // Refresh the panel to reflect the updated list
        suggestedFriendsPanel.revalidate();
        suggestedFriendsPanel.repaint();
    }

    public void sendFriendRequest(User receiver) {
        try {
            // Create a friend request
            FriendRequest friendRequest = new FriendRequest(currentUser.getUserId(), receiver.getUserId(), RequestStatus.PENDING);

            // Add the request to the sender's sentRequests
            //currentUser.getSentRequests().add(friendRequest);
            FriendManager friendManager = FriendManagerImplement.getInstance();

            User user = findUser.findUserById(currentUser.getUserId(), userManagement.getUsers());
            friendManager.sendFriendRequest(user, receiver, userManagement.getUsers());
            currentUser = user;
            // Add the request to the receiver's receivedRequests
            // receiver.getReceivedRequests().add(friendRequest);

            // Save the updated users list
            System.out.println("Saving users to file...");
            fileManagement.saveUsers(userManagement.getUsers());
            System.out.println("Users saved successfully.");

            System.out.println("Reloading users from file...");
            userManagement.setUsers(fileManagement.loadUsers());
            System.out.println("Users reloaded successfully.");

            // Show success message
            JOptionPane.showMessageDialog(this, "Friend request sent to " + receiver.getUsername(), "Success", JOptionPane.INFORMATION_MESSAGE);

            // Refresh UI
            refreshSentRequests();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error sending friend request: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refreshSentRequests() {
        // Clear existing components in the panel displaying sent requests
        sentRequestsPanel.removeAll();

        // Re-fetch the list of sent friend requests (from the current user's sent requests)
        List<FriendRequest> sentRequests = currentUser.getSentRequests();

        // Add each sent request to the panel
        for (FriendRequest request : sentRequests) {

            User receiver = findUser.findUserById(request.getReceiver(), userManagement.getUsers());  // Find the user being requested

            // Create a panel for each request
            JPanel requestPanel = new JPanel();
            requestPanel.setLayout(new FlowLayout(FlowLayout.LEFT));

            // Label to display the receiver's name
            JLabel receiverLabel = new JLabel("To: " + receiver.getUsername());
            receiverLabel.setFont(new Font("Arial", Font.PLAIN, 14));

            // Button to show status (or allow canceling)
            JLabel requestStatusLabel = new JLabel("Status: " + request.getStatus());
            requestPanel.add(receiverLabel);
            requestPanel.add(requestStatusLabel);

            // Add the request panel to the sent requests panel
            sentRequestsPanel.add(requestPanel);
        }
        fileManagement.saveUsers(userManagement.getUsers());
        //userManagement.setUsers(fileManagement.loadUsers());
        // Refresh the panel to reflect the updated list of sent requests
        sentRequestsPanel.revalidate();
        sentRequestsPanel.repaint();
    }

    private void showIncomingRequests() {
        // Get the list of received friend requests for the current user
        List<FriendRequest> receivedRequests = currentUser.getReceivedRequests();  // Assuming `currentUser` is the logged-in user

        // Clear existing components in the panel
        receivedRequestsPanel.removeAll();

        // Add each incoming request to the panel
        for (FriendRequest request : receivedRequests) {

            User sender = findUser.findUserById(request.getSender(), userManagement.getUsers());  // Find the sender by their ID

            // Create a panel to hold the sender's name and buttons
            JPanel requestPanel = new JPanel();
            requestPanel.setLayout(new FlowLayout(FlowLayout.LEFT));  // Align components horizontally
            requestPanel.setPreferredSize(new Dimension(300, 40));

            // Label to display the sender's name
            JLabel senderLabel = new JLabel("From: " + sender.getUsername());
            senderLabel.setFont(new Font("Arial", Font.PLAIN, 14));

            // Button to accept the request
            JButton acceptButton = new JButton("Accept");

            acceptButton.addActionListener(e -> respondToRequest(sender, request, RequestStatus.ACCEPTED));

            // Button to decline the request
            JButton declineButton = new JButton("Decline");
            declineButton.addActionListener(e -> respondToRequest(sender, request, RequestStatus.DECLINED));

            // Add components to the request panel
            requestPanel.add(senderLabel);
            requestPanel.add(acceptButton);
            requestPanel.add(declineButton);

            // Add the request panel to the received requests panel
            receivedRequestsPanel.add(requestPanel);
        }

        // Refresh the panel to reflect the updated list
        receivedRequestsPanel.revalidate();
        receivedRequestsPanel.repaint();
    }

    private void respondToRequest(User sender, FriendRequest request, RequestStatus response) {

        User user = currentUser;
        if (response == RequestStatus.ACCEPTED) {
            // Accept the friend request
            //FriendManager friendManager = FriendManagerFactory.createFriendManager(fileManagement);
            FriendManager friendManager = FriendManagerImplement.getInstance();

            friendManager.respondToFriendRequest(sender, user, RequestStatus.ACCEPTED, userManagement.getUsers());
            JOptionPane.showMessageDialog(this, "You are now friends with " + sender.getUsername(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } else if (response == RequestStatus.DECLINED) {
            // Reject the friend request
            //FriendManager friendManager = FriendManagerFactory.createFriendManager(fileManagement);
            FriendManager friendManager = FriendManagerImplement.getInstance();
            friendManager.respondToFriendRequest(sender, user, RequestStatus.DECLINED, userManagement.getUsers());
            JOptionPane.showMessageDialog(this, "You rejected the friend request from " + sender.getUsername(), "Rejected", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid response.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        currentUser = user;
        // Refresh the list of incoming requests
        // currentUser.getReceivedRequests().remove(request);

        showIncomingRequests();  // This refreshes the UI to remove the request or show the updated status
    }

    private void refreshFriendsList() {
        // Logic to refresh the friends list in the UI
        friendsPanel.removeAll(); // Clear the current list
        for (User friend : currentUser.getFriends()) {

            User user = findUser.findUserById(friend.getUserId(), userManagement.getUsers());
            JLabel friendLabel = new JLabel(user.getUsername());
            friendsPanel.add(friendLabel);
        }
        friendsPanel.revalidate();
        friendsPanel.repaint();
    }

    private void uploadImageStory() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Filter for image files only (jpg, png)
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "png", "jpeg", "gif"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            selectedImagePath = selectedFile.getAbsolutePath();
            imagePreview.setText(""); // Clear the "No image selected" text

            // Display the image in the label (resized for preview)
            ImageIcon icon = new ImageIcon(new ImageIcon(selectedImagePath).getImage().getScaledInstance(200, 150, Image.SCALE_SMOOTH));
            imagePreview.setIcon(icon);
        }
    }

    private void uploadImagePost() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Filter for image files only (jpg, png)
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "png", "jpeg", "gif"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            selectedImagePath = selectedFile.getAbsolutePath();
            ImagePreview2.setText(""); // Clear the "No image selected" text

            // Display the image in the label (resized for preview)
            ImageIcon icon = new ImageIcon(new ImageIcon(selectedImagePath).getImage().getScaledInstance(200, 150, Image.SCALE_SMOOTH));
            ImagePreview2.setIcon(icon);
        }
    }

    private void postStory() throws IOException {
        String caption = storyCaptionTextField.getText().trim();

        if (selectedImagePath == null || selectedImagePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please upload an image for the story.");
            return;
        }

        // Call createStory method from ContentService
        contentService.createStory(currentUser, caption, selectedImagePath, userManagement.getUsers());
        JOptionPane.showMessageDialog(this, "Story posted successfully!");
        // Clear inputs
        storyCaptionTextField.setText("");
        imagePreview.setIcon(null);
        imagePreview.setText("No image selected");
        selectedImagePath = null;
        refreshNewsfeed();
    }

    private void postPost() throws IOException {
        String caption = postCaptionTextField.getText().trim();

        if (selectedImagePath == null || selectedImagePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please upload an image for the Post.");
            return;
        }

        // Call createStory method from ContentService
        contentService.createPost(currentUser, caption, selectedImagePath, userManagement.getUsers());
        JOptionPane.showMessageDialog(this, "Post added successfully!");
        // Clear inputs
        postCaptionTextField.setText("");
        ImagePreview2.setIcon(null);
        ImagePreview2.setText("No image selected");
        selectedImagePath = null;

        NotificationService notificationService = NotificationService.getInstance();
        String currentUserName = currentUser.getUsername();
        for (User friend : currentUser.getFriends()) {
            notificationService.sendNewsfeedPostNotification(friend, currentUserName);
        }

        refreshNewsfeed();
        displayUserPosts(currentUser);

    }

    private void refreshNewsfeed() throws IOException {
        // Clear existing components
        StoriesPanel.removeAll();
        postPanel.removeAll();

        // Fetch and update active stories
        List<Story> activeStories = contentService.getFriendStories(currentUser, userManagement.getUsers());
        activeStories.addAll(currentUser.getStories());
        for (Story story : activeStories) {
            addStoryToPanel(story);
        }

        // Fetch and update posts
        List<Post> posts = contentService.getFriendPosts(currentUser, userManagement.getUsers());
        posts.addAll(currentUser.getPosts());
        for (Post post : posts) {
            addPostToPanel(post);
        }
//        fileManagement.saveUsers(userManagement.getUsers());
//        userManagement.setUsers(fileManagement.loadUsers());
        // Refresh panels
        StoriesPanel.revalidate();
        StoriesPanel.repaint();
        postPanel.revalidate();
        postPanel.repaint();
    }

    private void addStoryToPanel(Story story) {
        JLabel storyLabel = new JLabel(new ImageIcon(new ImageIcon(story.getImagePath()).getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH)));
        storyLabel.setToolTipText(story.getContentText());
        storyLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Open story details on click
        storyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                new displayStoryDetails(story).setVisible(true);
            }
        });

        StoriesPanel.add(storyLabel);
    }

    private JPanel createPostItemPanel(Post post) {
        JPanel postItemPanel = new JPanel();
        postItemPanel.setLayout(new BorderLayout());
        postItemPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        postItemPanel.setPreferredSize(new Dimension(638, 392));

        // Create the content label (caption)
        JLabel contentLabel = new JLabel("<html>" + post.getContentText() + "</html>");
        contentLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        contentLabel.setHorizontalAlignment(SwingConstants.CENTER);
        contentLabel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));

        // Create the header panel (user name)
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BorderLayout());

        // Add user name to the left
        JLabel userNameLabel = new JLabel(post.getAuthorId());  // Get the user's name from the post
        userNameLabel.setFont(new Font("Arial", Font.BOLD, 14));  // Set the font for the user name
        headerPanel.add(userNameLabel, BorderLayout.WEST);

        // Create the image label
        JLabel imageLabel = new JLabel();
        if (post.getImagePath() != null && !post.getImagePath().isEmpty()) {
            ImageIcon originalImage = new ImageIcon(post.getImagePath());

            // Maintain aspect ratio while scaling
            int maxWidth = 638;  // Max width for the image
            int maxHeight = 292; // Max height for the image

            int imageWidth = originalImage.getIconWidth();
            int imageHeight = originalImage.getIconHeight();

            // Calculate the scaling factor to maintain aspect ratio
            double widthRatio = (double) maxWidth / imageWidth;
            double heightRatio = (double) maxHeight / imageHeight;

            double scaleRatio = Math.min(widthRatio, heightRatio);  // Use the smaller ratio to maintain aspect ratio

            int newWidth = (int) (imageWidth * scaleRatio);
            int newHeight = (int) (imageHeight * scaleRatio);

            Image scaledImage = originalImage.getImage().getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(scaledImage));
        }

        // Add the header panel (user name) to the post
        postItemPanel.add(headerPanel, BorderLayout.NORTH);

        // Add the image label to the center of the panel
        postItemPanel.add(imageLabel, BorderLayout.CENTER);

        // Add the content label (caption) at the bottom of the post
        postItemPanel.add(contentLabel, BorderLayout.SOUTH);

        return postItemPanel;
    }

    private void displayUserPosts(User currentUser) {

        userPostPanel.removeAll();
        for (Post post : currentUser.getPosts()) {
            addPostToUserPanel(post);
        }
        userPostPanel.revalidate();
        userPostPanel.repaint();
    }

    private void addPostToPanel(Post post) {
        JPanel postItemPanel = createPostItemPanel(post);  // Reuse the helper method
        postPanel.add(postItemPanel);
    }

    private void addPostToUserPanel(Post post) {
        JPanel postItemUserPanel = createPostItemPanel(post);  // Reuse the helper method
        userPostPanel.add(postItemUserPanel);
    }

    private void displayFriendsList(User currentUser) {
        friendsPanel.removeAll();
        for (User friend : currentUser.getFriends()) {

            User user = findUser.findUserById(friend.getUserId(), userManagement.getUsers());
            JLabel friendLabel = new JLabel(user.getUsername() + " (" + user.getStatus() + ")");
            friendsPanel.add(friendLabel);
        }
    }

    private void uploadProfilePicture() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            try {
                // Using ProfileUpdater to update the profile picture
                //profileUpdater = new ProfileUpdater(fileManagement , userManagement.getUsers());
                profileUpdater.updateProfilePhoto(currentUser.getUserId(), filePath, userManagement.getUsers());

                // Load the image and scale it to fit within the label's boundaries
                ImageIcon imageIcon = new ImageIcon(filePath);
                Image image = imageIcon.getImage();

                // Get the label's width and height
                int width = profilePicLabel.getWidth();
                int height = profilePicLabel.getHeight();

                // Scale the image to fit within the label's size
                Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);

                // Set the scaled image as the label's icon
                profilePicLabel.setIcon(new ImageIcon(scaledImage));

            } catch (IllegalArgumentException | IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void uploadCoverPhoto() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "png", "jpeg", "gif"));
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filePath = selectedFile.getAbsolutePath();

            try {
                // Using ProfileUpdater to update the cover photo
                //ProfileUpdater profileUpdater = new ProfileUpdater(fileManagement ,userManagement.getUsers());
                profileUpdater.updateCoverPhoto(currentUser.getUserId(), filePath, userManagement.getUsers()); // Update the cover photo

                // Update the cover photo on the profile page
                ImageIcon coverPhotoIcon = new ImageIcon(filePath);
                coverPhotoLabel.setIcon(coverPhotoIcon); // Assuming coverPhotoLabel is the JLabel for the cover photo
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating cover photo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updatePassword() {
        String newPassword = JOptionPane.showInputDialog(this, "Enter new password:");
        if (newPassword != null && !newPassword.isEmpty()) {
            try {
                //ProfileUpdater profileUpdater = new ProfileUpdater(fileManagement ,userManagement.getUsers());
                profileUpdater.updatePassword(currentUser.getUserId(), newPassword, userManagement.getUsers()); // Update the password in the user profile
                JOptionPane.showMessageDialog(this, "Password updated successfully!");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating password.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Password cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateBio() {
        // Prompt the user to enter a new bio
        String newBio = JOptionPane.showInputDialog(this, "Enter your new bio:", "Update Bio", JOptionPane.PLAIN_MESSAGE);

        // Check if the user canceled or entered an empty bio
        if (newBio == null || newBio.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bio cannot be empty or cancelled.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Use ProfileUpdater to update the bio
            //ProfileUpdater profileUpdater = new ProfileUpdater(fileManagement ,userManagement.getUsers());
            profileUpdater.updateBio(currentUser.getUserId(), newBio.trim(), userManagement.getUsers()); // Update the bio for the current user

            // Optionally, update the displayed bio on the profile page
            JOptionPane.showMessageDialog(this, "Bio updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Update the displayed bio in the UI (e.g., a label)
            bioLabel.setText(newBio.trim());  // Assuming bioLabel is a JLabel showing the bio
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating bio.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectHubWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectHubWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectHubWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectHubWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectHubWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImagePreview2;
    private javax.swing.JPanel StoriesPanel;
    private javax.swing.JLabel addPostButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel bioLabel;
    private javax.swing.JButton blockUsers2;
    private javax.swing.JLabel coverPhotoLabel;
    private javax.swing.JTextField dobTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField emailTextField1;
    private javax.swing.JButton friendManagementButton;
    private javax.swing.JScrollPane friendSuggestionScroll;
    private javax.swing.JPanel friendsPanel;
    private javax.swing.JScrollPane friendsScrollPanel;
    private javax.swing.JScrollPane groupSuggestionScroll;
    private javax.swing.JLabel imagePreview;
    private javax.swing.JScrollPane incomingGroupReqScroll;
    private javax.swing.JScrollPane incomingReqScroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel joinedGroupsPanel;
    private javax.swing.JScrollPane joinedGroupsScrollPanel;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private keeptoo.KGradientPanel kGradientPanel4;
    private keeptoo.KGradientPanel kGradientPanel5;
    private keeptoo.KGradientPanel kGradientPanel6;
    private keeptoo.KGradientPanel kGradientPanel7;
    private keeptoo.KGradientPanel kGradientPanel8;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPopupMenu menue;
    private javax.swing.JLabel notificationLabel;
    private javax.swing.JPanel ownedGroupsPanel;
    private javax.swing.JScrollPane ownedGroupsScrollPanel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordField1;
    private javax.swing.JLabel pfp;
    private javax.swing.JTextField postCaptionTextField;
    private javax.swing.JPanel postPanel;
    private javax.swing.JButton postPostButton;
    private javax.swing.JButton postStoryButton;
    private javax.swing.JLabel profilePicLabel;
    private javax.swing.JPanel receivedGroupRequestsPanel1;
    private javax.swing.JPanel receivedRequestsPanel;
    private javax.swing.JLabel refresh;
    private javax.swing.JLabel refresh2;
    private javax.swing.JLabel refresh3;
    private javax.swing.JButton removeFriendButton1;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton returnButton1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JList<String> searchList;
    private javax.swing.JPanel searchResultsPanel;
    private javax.swing.JScrollPane sentGroupReqScroll;
    private javax.swing.JPanel sentGroupRequestsPanel;
    private javax.swing.JScrollPane sentReqScroll;
    private javax.swing.JPanel sentRequestsPanel;
    private javax.swing.JButton signUpButton;
    private javax.swing.JLabel signinLabel;
    private javax.swing.JTextField storyCaptionTextField;
    private javax.swing.JPanel suggestedFriendsPanel;
    private javax.swing.JPanel suggestedGroupsPanel;
    private javax.swing.JButton unBlockUsers1;
    private javax.swing.JButton updateBio;
    private javax.swing.JButton updatePass;
    private javax.swing.JButton uploadCoverPhoto1;
    private javax.swing.JButton uploadPfp;
    private javax.swing.JButton uploadPostButton;
    private javax.swing.JButton uploadStoryButton;
    private javax.swing.JPanel userPostPanel;
    private javax.swing.JScrollPane userPosts;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JButton viewUserGroupsButton;
    // End of variables declaration//GEN-END:variables
}
